{"version":3,"sources":["Header.js","DropDown.js","DisplaySelection.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","DropDown","userpicks","event","setState","userSelection","target","value","state","class","htmlFor","onChange","this","name","id","onClick","props","getProduct","DisplaySection","item","map","displayItem","key","_id","src","image_link","App","userChoice","preventDefault","axios","url","method","responseType","then","response","console","log","currentProducts","data","getUserInput","className","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QAaeA,E,uKATX,OACE,gCACE,oDACA,8F,GALaC,a,iBCoCJC,E,kDAnCb,aAAe,IAAD,8BACZ,gBAMFC,UAAY,SAACC,GACX,EAAKC,SAAS,CACZC,cAAeF,EAAMG,OAAOC,SAP9B,EAAKC,MAAQ,CACXH,cAAe,IAHL,E,qDAaJ,IAAD,OACP,OACE,8BACE,yBAAKI,MAAM,gBACX,2BAAOC,QAAQ,kBACf,4BAAQC,SAAWC,KAAKV,UAAYW,KAAK,gBAAgBC,GAAG,iBAC1D,4BAAQP,MAAM,YAAd,aACA,4BAAQA,MAAM,aAAd,cACA,4BAAQA,MAAM,SAAd,UAGF,4BACEQ,QAAU,SAACZ,GAAD,OAAW,EAAKa,MAAMC,WAAWd,EAAO,EAAKK,MAAMH,iBAD/D,iB,GAzBaL,aCoBRkB,EApBQ,SAAEF,GACrB,OACE,0BAAMP,MAAM,gBAERO,EAAMG,KAAKC,KAAI,SAACC,GACd,OACI,yBAAKC,IAAKD,EAAYE,KACtB,6BACE,yBAAKC,IAAKH,EAAYI,aACtB,4BAAKJ,EAAYR,aCyCpBa,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAMFT,WAAa,SAACd,EAAMwB,GAClBxB,EAAMyB,iBAENC,IAAM,CACJC,IAAI,sEAAD,OAAwEH,EAAxE,KACHI,OAAO,MACPC,aAAa,SAEdC,MAAM,SAACC,GACJC,QAAQC,IAAIF,GACd,EAAK9B,SAAS,CACZiC,gBAAiBH,EAASI,WAlBlB,EAwBZC,aAAe,SAACpC,GACdA,EAAMyB,kBAvBR,EAAKpB,MAAQ,CACX6B,gBAAiB,IAHP,E,qDA8BV,OACE,yBAAKG,UAAU,OACb,yBAAK/B,MAAM,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUQ,WAAaL,KAAKK,aAC5B,kBAAC,EAAD,CAAgBwB,MAAO7B,KAAKJ,MAAM6B,wB,GApC1BrC,cCGE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.d1837a62.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1>Welcome to MakeAPin!</h1>\r\n        <p>This website is designed to help you find makeup products!</p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass DropDown extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        userSelection: \"\"\r\n      }\r\n    }\r\n  \r\n    userpicks = (event) => {\r\n      this.setState({\r\n        userSelection: event.target.value\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <form>\r\n          <div class=\"dropDownForm\">\r\n          <label htmlFor=\"makeupProduct\"></label>\r\n          <select onChange={ this.userpicks } name=\"makeupProduct\" id=\"makeupProduct\">\r\n            <option value=\"lipstick\">Lipsticks</option>\r\n            <option value=\"eyeshadow\">Eye Shadow</option>\r\n            <option value=\"blush\">Blush</option>\r\n          </select>\r\n  \r\n          <button\r\n            onClick={ (event) => this.props.getProduct(event, this.state.userSelection) }\r\n          > Submit\r\n          </button>\r\n          </div>\r\n  \r\n        </form>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default DropDown;","import React from 'react';\r\n\r\nconst DisplaySection = ( props ) => {\r\n    return(\r\n      <main class=\"imageDisplay\">\r\n        {\r\n          props.item.map((displayItem) => {\r\n            return(\r\n                <div key={displayItem._id} >\r\n                <div>\r\n                  <img src={displayItem.image_link}></img> \r\n                  <h2>{displayItem.name}</h2> \r\n                </div>\r\n                </div>\r\n          );    \r\n          })\r\n         }\r\n      </main>\r\n    )\r\n  }\r\n\r\n\r\nexport default DisplaySection;\r\n","import React, { Component } from 'react';\r\nimport Header from './Header.js';\r\nimport axios from 'axios';\r\nimport DropDown from './DropDown'\r\nimport DisplaySection from './DisplaySelection.js'\r\nimport './App.css';\r\n//on change \r\n//dropdown component \r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      currentProducts: []\r\n    }\r\n  }\r\n\r\n  getProduct = (event,userChoice) =>  {\r\n    event.preventDefault();\r\n      //run getProduct with userChoice as an argument \r\n    axios({ \r\n      url: `https://makeup-api.herokuapp.com/api/v1/products.json?product_type=${userChoice} `,\r\n      method: `GET`,\r\n      responseType: `json`\r\n    })\r\n    .then( (response) => {\r\n        console.log(response)\r\n      this.setState({\r\n        currentProducts: response.data\r\n      \r\n      })\r\n    })\r\n  }\r\n\r\n    getUserInput = (event) => {\r\n      event.preventDefault();\r\n  }\r\n\r\n\r\n  render(){\r\n      return (\r\n        <div className=\"App\">\r\n          <div class=\"wrapper\">\r\n          <Header />\r\n          <DropDown getProduct={ this.getProduct } / >\r\n          <DisplaySection items={this.state.currentProducts} />\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}