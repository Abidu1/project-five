{"version":3,"sources":["firebaseApp.js","Header.js","DisplaySelection.js","ReviewMakeup.js","DropDown.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","class","Component","DisplaySection","props","className","items","map","displayItem","key","_id","src","image_link","alt","name","href","product_link","ReviewMakeup","userPost","event","setState","review","target","value","postSubmission","preventDefault","database","ref","push","state","removeSubmission","postRemoval","child","remove","submittedData","on","response","startState","val","newState","usersInput","id","post","action","onChange","this","type","minLength","maxLength","placeholder","onClick","DropDown","userpicks","userSelection","htmlFor","getProduct","Footer","App","userChoice","axios","url","method","responseType","then","result","currentProducts","data","getUserInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99554ce6.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n//App's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB_ajyBDSyEtitvQja9RjazFvXvg9dIMZI\",\r\n    authDomain: \"makeapin-8e06f.firebaseapp.com\",\r\n    databaseURL: \"https://makeapin-8e06f.firebaseio.com\",\r\n    projectId: \"makeapin-8e06f\",\r\n    storageBucket: \"makeapin-8e06f.appspot.com\",\r\n    messagingSenderId: \"295154334827\",\r\n    appId: \"1:295154334827:web:a656af508beaec8ae0052e\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n export default firebase;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n//header has title of the app and description of what it does\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div class =\"wrapper\">\r\n          <h1>Welcome to Makeup Finder!</h1>\r\n          <p>This website is designed to help you find makeup products!</p>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ReviewMakeup from './ReviewMakeup';\r\n\r\n//Used to display api function by getting the image and name of makeup product\r\nconst DisplaySection = (props ) => {\r\n    return(\r\n      <section >\r\n        <div className=\"imageDisplay\">\r\n        {\r\n        // maps runs through and display the different products with name and image\r\n          props.items.map((displayItem) => {\r\n            return(\r\n            <div className=\"wrapper\">\r\n              <div key={displayItem._id} >\r\n                <div className=\"makeupItems\">\r\n                    <img src={displayItem.image_link} alt={displayItem.name}></img> \r\n                    <p>{displayItem.name}</p>    \r\n                    <a href={displayItem.product_link}>Buy Now</a>     \r\n                </div>\r\n            </div>\r\n            </div>\r\n          );    \r\n        })\r\n      }\r\n      </div> \r\n    </section> \r\n  )\r\n}\r\n\r\n\r\nexport default DisplaySection;\r\n","\r\nimport React, { Component } from 'react';\r\nimport firebase from './firebaseApp';\r\nimport DislaySection from './DisplaySelection'\r\n\r\nclass ReviewMakeup extends Component {\r\nconstructor() {\r\n    super();\r\n\r\n    this.state = {\r\n    //holds array of input\r\n    submittedData: [],\r\n    //user's input from when they write down their review\r\n    review: \"\"\r\n    }\r\n}\r\n// getting data from firebase \r\ncomponentDidMount() {\r\n    const dbRef = firebase.database().ref('productReviews');\r\n// creating a variable and storing it  \r\n    dbRef.on('value', (response) => {\r\n    const startState = response.val();\r\n    const newState = [];\r\n    //start state is an object so we use for loop to access user's review\r\n    for (let key in startState) {\r\n    const usersInput = {\r\n    //key generated by firebase and post holds input \r\n        id: key,\r\n        post: startState[key]\r\n    \r\n        }\r\n    //pushing a new user's review into our app\r\n        newState.push(usersInput);\r\n    }\r\n    //updating our component state using newstate\r\n    this.setState({\r\n        submittedData: newState\r\n    })\r\n    })\r\n}\r\n\r\n//deals with the textarea input\r\nuserPost = (event) => {\r\n    this.setState({\r\n        review: event.target.value\r\n    })\r\n}\r\n\r\n\r\n//User has submitted their review so they submit an object to firebase\r\npostSubmission = (event) => {\r\n    event.preventDefault();\r\n    const dbRef = firebase.database().ref('productReviews');\r\n    dbRef.push(this.state.review);\r\n    this.setState({\r\n    review: \"\"\r\n    })\r\n}\r\n\r\n\r\n\r\n//function to remove a review\r\nremoveSubmission = (postRemoval) => {\r\n    const dbRef = firebase.database().ref('productReviews');\r\n    dbRef.child(postRemoval).remove();\r\n}\r\n\r\nrender () {\r\n    return (\r\n    <div className=\"postSection\">\r\n        <form action=\"submit\">\r\n        <input onChange={this.userPost} type=\"textarea\" minLength=\"20\" maxLength=\"300\" value={this.state.review} placeholder=\"Write a review here!\"/>\r\n        <button class=\"submitButton\" onClick={this.postSubmission}>Submit</button>\r\n        </form>\r\n\r\n        { this.state.submittedData.map((review) => {\r\n            return (\r\n            <div className=\"addedUserReview\">\r\n                <div key={review.id}></div>\r\n                <p>{review.post}</p>\r\n                <button class=\"delete\" onClick={ () => this.removeSubmission(review.id)}>Delete Review</button>\r\n                \r\n            </div>\r\n            )\r\n        }) }\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default ReviewMakeup;\r\n","import React, { Component } from 'react';\r\nimport ReviewMakeup from './ReviewMakeup';\r\n\r\nclass DropDown extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        userSelection: \"\"\r\n      }\r\n    }\r\n  \r\n    userpicks = (event) => {\r\n      this.setState({\r\n        userSelection: event.target.value\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <main>\r\n          <div class=\"wrapper\">\r\n            <form>\r\n              <div class=\"dropDownForm\">\r\n                <label htmlFor=\"makeupProduct\"></label>\r\n                <select onChange={ this.userpicks } name=\"makeupProduct\" id=\"makeupProduct\">\r\n                  <option value=\"lipstick\">Lipstick</option>\r\n                  <option value=\"eyeshadow\">EyeShadow</option>\r\n                  <option value=\"blush\">Blush</option>\r\n                </select>\r\n                \r\n                <button class=\"submitButton\"\r\n                  onClick={ (event) => this.props.getProduct(event, this.state.userSelection) }\r\n                > Submit\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </main>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default DropDown;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n//Copyright information\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <div class=\"wrapper\">\r\n        <p>Copyright Usra Abid © 2020</p>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport firebaseApp from './firebaseApp';\r\nimport Header from './Header.js';\r\nimport DropDown from './DropDown'\r\nimport DisplaySection from './DisplaySelection.js'\r\nimport ReviewMakeup from './ReviewMakeup.js'\r\nimport Footer from './Footer'\r\nimport DisplaySelection from './DisplaySelection.js';\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      currentProducts: [],\r\n    }\r\n  }\r\n//Making an Api call and putting userchoice to get different product types\r\n  getProduct = (event,userChoice) =>  {\r\n    event.preventDefault();\r\n      // run getProduct with userChoice as an argument \r\n    axios({ \r\n      url: `https://makeup-api.herokuapp.com/api/v1/products.json?product_type=${userChoice} `,\r\n      method: `GET`,\r\n      responseType: `json`\r\n    })\r\n    .then( (result) => {\r\n      this.setState({\r\n      //using the data from the api call into a state\r\n        currentProducts: result.data\r\n      }\r\n    );\r\n  })\r\n  }\r\n\r\n\r\n//Getting user input\r\n  getUserInput = (event) => {\r\n    event.preventDefault();\r\n  }\r\n\r\n//putting different components together \r\n  render(){\r\n      return (\r\n        <div className=\"App\">\r\n          <Header />\r\n          <DropDown getProduct={ this.getProduct } / >\r\n          <DisplaySection items={this.state.currentProducts} />\r\n\t\t\t\t  <ReviewMakeup />\r\n          <Footer/>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}